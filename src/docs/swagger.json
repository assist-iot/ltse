{
    "swagger": "2.0",
    "info": {
        "title": "LTSE",
        "contact": {},
        "version": "2.0.0"
    },
    "host": "localhost:8080",
    "basePath": "/",
    "paths": {
        "/nosql/api/": {
            "get": {
                "description": "RestApi ElasticSearch 7.17 guide\nhttps://www.elastic.co/guide/en/elasticsearch/reference/7.17/rest-apis.html",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "nosql API ElasticSearch"
                ],
                "summary": "For use API ElasticSearch, initial path",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Optional PostgRest Options",
                        "name": "proxyPath",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "409": {
                        "description": "Conflict"
                    }
                }
            }
        },
        "/nosql/index/{indexName}": {
            "get": {
                "description": "Returns information about indexname index from the ltse nosql cluster",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "noSQL API"
                ],
                "summary": "Get index info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "index name",
                        "name": "indexName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "put": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "noSQL API"
                ],
                "summary": "Create index in elastic",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Index name",
                        "name": "indexName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "409": {
                        "description": "Conflict"
                    }
                }
            }
        },
        "/nosql/index/{indexName}/document": {
            "put": {
                "description": "Adds a json document to the specified \u003cindexname \u003e index of the ltse nosql cluster and return id to makes it searchable",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "noSQL API"
                ],
                "summary": "Add a json document to index without id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Index name",
                        "name": "indexName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/nosql/index/{indexName}/document/{id}": {
            "get": {
                "description": "Retrieves the specified json document \u003c_id\u003e from the indexname of the ltse nosql cluster.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "noSQL API"
                ],
                "summary": "Get json document by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Index name",
                        "name": "indexName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "put": {
                "description": "Add a json document to the specified \u003cindexname\u003e index of the ltse nosql cluster and makes it searchable with an \u003c_id\u003e",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "noSQL API"
                ],
                "summary": "Add a json document to index and makes it searchable with an id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Index name",
                        "name": "indexName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/sql/api/": {
            "get": {
                "description": "You must take into account that for some operations it is necessary to use specific headers such as **Accept-Profile** or **Content-Profile** both to indicate the name of the schema when making the request. You can get more information in the api guide.\n\n**RestApi PostgRest 9.0.0 guide**\nhttps://postgrest.org/en/v9.0/",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sql PostgREST"
                ],
                "summary": "For use API PostgREST, initial path",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Active Schema in PostgRest",
                        "name": "Accept-Profile",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Optional PostgRest Options",
                        "name": "proxyPath",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "409": {
                        "description": "Conflict"
                    }
                }
            }
        },
        "/sql/schemas": {
            "get": {
                "description": "You can get the list activated schemas for use in API PostgREST by using the option activesInPostgRest=true",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SQL API"
                ],
                "summary": "Get database schema list",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "If true, show only the activate schemas for to be used in PostgREST",
                        "name": "activesInPostgRest",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Schema list message"
                    },
                    "500": {
                        "description": "Error message"
                    }
                }
            }
        },
        "/sql/schemas/{schemaName}": {
            "put": {
                "description": "You can Enable or disable the schema for use in API PostgREST",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SQL API"
                ],
                "summary": "Enable or disable the schema for use in API PostgREST",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Schema name",
                        "name": "schemaName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Activate or deactivate the scheme in postrest",
                        "name": "isActiveInPostgRest",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Schema updated message"
                    },
                    "500": {
                        "description": "Error message"
                    }
                }
            },
            "post": {
                "description": "You can create an empty schema or import it from file.",
                "tags": [
                    "SQL API"
                ],
                "summary": "Create schema in database",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Schema name",
                        "name": "schemaName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "SQL file to import. The schema name in the script must be the same as the declared schemaName field above.",
                        "name": "file",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Schema created message"
                    },
                    "500": {
                        "description": "Error message"
                    }
                }
            }
        },
        "/sql/schemas/{schemaName}/tables/{tableName}": {
            "put": {
                "description": "You can truncate a table on schema.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SQL API"
                ],
                "summary": "Truncate table",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Schema name",
                        "name": "schemaName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Schema name",
                        "name": "tableName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "RESTART or IDENTITY",
                        "name": "identity",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "CASCADE or RESTRICT",
                        "name": "constraint",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Table truncate message"
                    },
                    "500": {
                        "description": "Error message"
                    }
                }
            },
            "post": {
                "description": "You can create a table on schema",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SQL API"
                ],
                "summary": "Create table",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Schema name",
                        "name": "schemaName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Schema name",
                        "name": "tableName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON",
                        "name": "raw_body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/apisql.DDLCreateTable"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Table created messsage"
                    },
                    "500": {
                        "description": "Error message"
                    }
                }
            },
            "delete": {
                "description": "You can delete table on schema. You must first truncate the table.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SQL API"
                ],
                "summary": "Delete table",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Schema name",
                        "name": "schemaName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Schema name",
                        "name": "tableName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "CASCADE or RESTRICT",
                        "name": "constraint",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Table dropped message"
                    },
                    "500": {
                        "description": "Error message"
                    }
                }
            }
        }
    },
    "definitions": {
        "apisql.DDLCreateTable": {
            "type": "object",
            "properties": {
                "columns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apisql.TableField"
                    }
                },
                "constraints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apisql.TableField"
                    }
                }
            }
        },
        "apisql.TableField": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        }
    }
}